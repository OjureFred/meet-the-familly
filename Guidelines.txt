CHILD ADDITON
1. Cannot have duplicate names -> CHILD_ADDITION__FAILED
2. If a tree is empty add -> CHILD_ADDITION_SUCCEEDED
3. Cannot be added through father -> CHILD_ADDITION__FAILED
4. Both father and mother need to exist -> PERSON_NOT_FOUND
5. All cases succesful -> CHILD_ADDITION_SUCCEEDED

SPOUSE ADDITION 
1. Cannot have duplicate name -> SPOUSE_ADDITION_FAILED
2. Cannot be added if tree is empty -> SPOUSE_ADDITION_FAILED
3. Spouse needs to exist -> PERSON_NOT_FOUND
4. Spouse gender need to be opposite -> SPOUSE_ADDITION_FAILED
5. Spouse cannot have existing spouse -> SPOUSE_ADDITION_FAILED

GET RELATIONSHIP NOTE:
The names of people in the relationship need to be printed in order of their addition 
1. Person should exist -> PERSON_NOT_FOUND
2. Should return non empty list -> NONE

CLASSES

1. GENDER 

data_members
=============
male = 'MALE'
female = 'FEMALE'

2. MEMBER 
data_members
=============
id - Integer
name - String
gender - Enum Gender 
mother - Member 
father - Member 
spouse - Member
children - List<Member>

methods
=======
get_paternal_aunt - params: None ->self.father.mother.children.filter(female)
     - grandmother is None return []
     - grandmother is valid but only one child - your father - return []
     - grandmother is valid, has multiple children but no girls - return []
     - grandmother is valid, has multiple children Both boys and girls - return [girls]

get_paternal_uncle - params: None -> self.father.mother.children.filter(male)
    - grandmother is none - return []
    - grandmother is valid but only one child - your father - return []
    - grandmother is valid, has multiple children all girls - return []
    grandmother is valid, has multiple children both boys and girls - return [boys excluding your father]
    
get_maternal_aunt - params: None
get_maternal_aunt - params: None

get brother_in_law - param: None -> self.spouse.mother.children.filter(male)
    - spouse mother is None - return []
    - spouse mother is valid but has only one child, our spouse. Return []
    - spouse mother is valid and has multiple children all girls. Return []
    - spouse mother is valid and has multiple children both boys and girls. Return [boys]

get_sister_in_law - params: None -> self.spouse.mother.children.filter(male)
    - spouse mother is None - return []
    - spouse mother is valid but has only one child, our spouse. Return []
    - spouse mother is valid and has multiple children all boys. Return []
    - spouse mother is valid and has multiple children both boys and girls. Return [boys]

get_son - params: None
    - self.children is None - return []
    - self.children is all girls - return []
    - self.children has both boys and girls - return [boys]

get_daughter - params: None
    - self.children is None - return []
    - self.children is all girls - return []
    - self.children has both boys and girls - return [boys]


get_siblings - params: None

get_relationship - params: String relationship_type

3. FAMILY TREE 
data_members
============
family_tree - Dictionary

Methods 
======= 
constructor - params: None

add_child - params: String name, String gender, String mother_name
    - create Member
    - if family_tree is empty
        - add Member
        - return CHILD_ADDITION_SUCCEEDED
    
    - if family_tree is not empty
        - if member already exists
            - return CHILD_ADDITION__FAILED
        - mother should be entity
        - if not mother:
            - return PERSON_NOT_FOUND
        - mother spouse(father) should be entity 
        - if not mother.spouse
            - return CHILD_ADDITION__FAILED
        
        if both mother and father exists:
            - add child for both mother and father
            - set_mother for member 
            - set_father for Member
            - return CHILD_ADDITION_SUCCEEDED

add_spouse - params: String name, String gender, String spouse_name 
    - create member
    - if family_tree is empty:
        - return SPOUSE_ADDITION_FAILED
    if family_tree is not empty:
        - if member already exists:
            - return SPOUSE_ADDITION_FAILED
        - spouse should be a valid entry
        - if not spouse:
            - return PERSON_NOT_FOUND
        - if spouse.gender == member.gender:
            return SPOUSE_ADDITION_FAILED
        - if spouse already married:
            - return SPOUSE_ADDITION_FAILED
        - if all conditions match:
            - set spouse for member
            - set_spouse for spouse
            - create an entry for spouse
            - return SPOUSE_ADDITION_SUCCEEDED
            
get_relationship - params: String name, String relationship_type
    - if not member
        return PERSON_NOT_FOUND
    result = member.get_relationship
    if not result:
        return NONE
    else
        return ''.join(sort_based_on_id)